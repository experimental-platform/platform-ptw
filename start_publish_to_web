#!/usr/bin/env ruby

# Make sure to flush logs immediately
STDOUT.sync = STDERR.sync = true

require 'publish_to_web'

def gateway
  # /proc/net/route contains all infos about current routes, we extract the default Gateway
  # Example Line: eth0  00000000  012A010A  0003  0 0 0 00000000  0 0 0
  # Second column is 0.0.0.0, so third column is our default gateway
  gateway_hex = `awk '$2==00000000 {print $3}' /proc/net/route`.strip
  # Ex.: 012A010A -> [01 2A 01 0A] -> [1 42 1 10].reverse -> [10 1 42 1].join('.') -> 10.1.42.1
  gateway_hex.scan(/.{2}/).reverse.map { |s| s.to_i(16) }.join(".")
end

if ENV['DEBUG']
  puts "Activating in-memory config storage for debugging"
  SKVS.adapter = SKVS::MemoryAdapter.new
end

ptw = PublishToWeb.new bind_host: gateway

if ENV['DEBUG'] and ENV['LICENSE_KEY']
  puts "Using license key given from ENV for debugging"
  ptw.config.license_key = ENV['LICENSE_KEY']
end

s_read, s_write = IO.pipe
%w[ USR1 INT QUIT TERM ].each do |s|
  trap(s) { s_write.puts s }
end

ptw.start_tunnel blocking: false

reading = true
while reading and sockets = IO.select([s_read], [])
  reading_sockets = sockets.first
  if signal = reading_sockets.first.gets
    signal.strip!

    case signal
    when 'USR1'
      ptw.prepare_directory
    when /(?:INT|QUIT|TERM)/
      puts "Received #{ signal }, exiting..."
      reading = false
    end
  else
    puts "Reading socket closed, exiting..."
    reading = false
  end
end

puts "Closing sockets..."
s_write.close
s_read.close

puts "Stopping tunnel..."
# clean up after we exited the main loop
begin
  ptw.stop_tunnel 5 # will wait max 5 seconds
rescue => e
  STDERR.puts e.message, e.backtrace.join("\n")
end

puts 'Done.'
